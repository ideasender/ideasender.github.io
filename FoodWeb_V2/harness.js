// DO NOT EDIT THIS FILE

(function(){

    var applicationIdString = "";
    var callbackObject = "";

    var foregroundSounds = [];
    var backgroundSounds = [];

    var contextClass = (
      window.AudioContext ||
      window.webkitAudioContext ||
      window.mozAudioContext ||
      window.oAudioContext ||
      window.msAudioContext);

    if (contextClass) {
      var context = new contextClass();
    } else {
      console.log('No audio context');
    }

    var levels = {
      background: 0.20,
      foreground: 0.65,
      fade: 0.10
    };

    var prePauseLevels = {};

    var backgroundGainNode = context.createGain();
    var foregroundGainNode = context.createGain();

    window.init = function(applicationId, gameObject) {
        applicationIdString = applicationId;
        callbackObject = gameObject;
        parent.postMessage({message: 'init'}, '*');
    }

    window.submitProgress = function(progress) {
      parent.postMessage({message:'progress', payload: progress}, '*');
    }

    window.completeGame = function() {
      parent.postMessage({message:'complete'}, '*');
    }

    window.submitAnswer = function(answer) {
      parent.postMessage({message:'answer', payload: answer}, '*');
    }

    window.acknowledge = function(message) {
      parent.postMessage({message:'acknowledge', payload: message}, '*');
    }

    window.error = function(message) {
      parent.postMessage({message:'error', payload: message}, '*');
    }

    window.loadingProgress = function(progress) {
      parent.postMessage({message:'loadingProgress', payload: ''+progress}, '*');
    }

    function onMesssage(msg) {
      if (msg.data.messageName == 'pause') {
        SendMessage(callbackObject, 'PauseMessageReceived');
        mute();
      }

      if (msg.data.messageName == 'resume') {
        SendMessage(callbackObject, 'ResumeMessageReceived');
        unmute();
      }

      if (msg.data.messageName == 'questions') {
        SendMessage(callbackObject, 'QuestionListReceived', msg.data.payload);
      }
    }

    // register for messages from LoL platform
    window.addEventListener("message", onMesssage);

    function onError(err) {
      alert('err: '+err);
    }

    function applyLevels() {
      backgroundGainNode.gain.value = levels.background;
      foregroundGainNode.gain.value = levels.foreground;
    }

    applyLevels();

    function mute() {
      prePauseLevels = Object.assign({}, levels);
      levels = {background:0, foreground:0, fade:0};
      applyLevels();
    }

    function unmute() {
      levels = prePauseLevels;
      applyLevels();
    }

    function findFileIndex(list, filePath) {
      for (var ctr=0; ctr<list.length; ctr++) {
        var entry = list[ctr];
        if (entry.filePath === filePath) {
          return ctr;
        }
      }

      return -1;
    }

    function findSourceIndex(list, source) {
      for (var ctr=0; ctr<list.length; ctr++) {
        var entry = list[ctr];
        if (entry.source === source) {
          return ctr;
        }
      }

      return -1;
    }

    function stopSource(list, source) {
      var index = findSourceIndex(list, source);
      stopEntry(list, index);
    }

    function stopEntry(list, index) {
      if (index > -1) {
        var removedEntry = list.splice(index, 1);
        removedEntry[0].source.stop();
      }
    }

    window.playSound = function(filePath, background, loop) {

      play(filePath, background === 'True', loop === 'True');
    }

    window.stopSound = function(filePath) {
      var index = findFileIndex(foregroundSounds, filePath);
      stopEntry(foregroundSounds, index);

      if (index === -1) {
        index = findFileIndex(backgroundSounds, filePath);
        stopEntry(backgroundSounds, index);
      }
    }

    window.configureSound = function(soundVolume, backgroundSoundVolume,  fadeVolume) {
      levels = {
        background: backgroundSoundVolume,
        foreground: soundVolume,
        fade: fadeVolume
      };

      backgroundGainNode.gain.value = levels.background;
      foregroundGainNode.gain.value = levels.foreground;
    }

    function allowSound(event) {
      var oscillator = context.createOscillator();
      var analyser = context.createAnalyser();

      // Setup the graph.
      var oscillatorGainNode = context.createGain();
      oscillatorGainNode.gain.value=0.0;
      oscillator.connect(analyser);
      analyser.connect(oscillatorGainNode);
      oscillatorGainNode.connect(context.destination);

      oscillator[oscillator.start ? 'start' : 'noteOn'](0);

      setTimeout(function() {
        oscillator.stop(0);
      }, 1);

      window.removeEventListener('touchstart', allowSound);
    };

    window.addEventListener('touchstart', allowSound);

    function play(filePath, background, loop) {
      var request = new XMLHttpRequest();
      request.open('GET', './StreamingAssets/Audio/'+filePath, true);
      request.responseType = 'arraybuffer';

      // Decode asynchronously
      request.onload = function() {
        context.decodeAudioData(request.response, function(theBuffer) {
          buffer = theBuffer;
          var source = context.createBufferSource();
          source.buffer = buffer;
          source.loop = loop;

          var list = (background) ? backgroundSounds : foregroundSounds ;
          var gainNode = (background) ? backgroundGainNode : foregroundGainNode;

          list.push({filePath: filePath, source: source});

          source.onended = function() {
            stopSource(list, source);
            backgroundGainNode.gain.value = (foregroundSounds.length > 0) ? levels.fade : levels.background;
          }

          source.connect(gainNode);
          gainNode.connect(context.destination);

          backgroundGainNode.gain.value = (foregroundSounds.length > 0) ? levels.fade : levels.background;
          source.start(0)
        }, onError);
      }

      request.send();
    }

}());
